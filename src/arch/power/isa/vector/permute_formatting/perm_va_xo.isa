format IntArithOp {
    43: vperm({{
        uint64_t vsrc[4];
        uint8_t *ppp = (uint8_t *)vsrc;
        uint16_t index;
        vsrc[0] = Vb_ud[0];
        vsrc[1] = Vb_ud[1];
        vsrc[2] = Va_ud[0];
        vsrc[3] = Va_ud[1];
        for(int i=0; i < 16; i++) {
            index = bits(Vc_ub[i], 4, 0);
            Vt_ub[i] = ppp[31 - index];
        }
    }});

    42: vsel({{
        uint64_t src1[2], src2[2], mask[2];
        for(int i = 0; i < 2; i++){
            src1[i] = Va_ud[i];
            src2[i] = Vb_ud[i];
            mask[i] = Vc_ud[i];
        }
        Vt_ud[0] = (src1[0] & ~(mask[0])) | (src2[0] & (mask[0]));
        Vt_ud[1] = (src1[1] & ~(mask[1])) | (src2[1] & (mask[1]));
    }});
}